{"componentChunkName":"component---src-pages-use-cases-kafka-streams-lab-3-index-mdx","path":"/use-cases/kafka-streams/lab-3/","result":{"pageContext":{"frontmatter":{"title":"Kafka Streams Test Lab 3","description":"Using Kafka Streams to compute real time inventory stock"},"relativePagePath":"/use-cases/kafka-streams/lab-3/index.mdx","titleType":"append","MdxNode":{"id":"a94a4df2-2282-5ab0-ad9e-9961f3942b0c","children":[],"parent":"7bd86609-d794-5458-9f74-b4376167c37b","internal":{"content":"---\ntitle: Kafka Streams Test Lab 3\ndescription: Using Kafka Streams to compute real time inventory stock\n---\n\n<AnchorLinks>\n    <AnchorLink>Overview</AnchorLink>\n    <AnchorLink>Scenario Prerequisites</AnchorLink>\n    <AnchorLink>Develop the application</AnchorLink>\n</AnchorLinks>\n\n\n## Overview\n\n- In this lab scenario we're going to use [Quarkus](https://quarkus.io) to develop the core application with Kafka streams api and microprofile reactive messaging.\n- We will be testing using [Apache Kafka Streams](https://kafka.apache.org/documentation/streams/) TestDriver to mimic a Topology, a Stream and Table.\n\nThe requirements to address are:\n\n- consume item sold from items topic, item has unique key. Item event has store information\n- compute for each item its current stock cross store\n- compute the store stock for each item\n- generate inventory event for store - item - stock\n- expose APIs to get stock for a store or for an item\n\n## Scenario Prerequisites\n\n**Java**\n- For the purposes of this lab we suggest Java 11+\n\n**Maven**\n- Maven will be needed for bootstrapping our application from the command-line and running\nour application.\n\n**An IDE of your choice**\n- Ideally an IDE that supports Quarkus (such as Visual Studio Code)\n\n**OpenShift Container Platform**\n    - v4.4.x\n\n**IBM Cloud Pak for Integration**\n    - CP4I2020.2\n\n**IBM Event Streams**\n    - The section on use with Event Streams on CP4I assumes Event Streams v10. IF using a previous version such as ESv2019.4.2\n    there are some differences to how you would configure `application.properties` to establish a connectio\n\n**Code Source**: clone the following git repository: `git clone https://github.com/ibm-cloud-architecture/refarch-eda-item-inventory`\n\n\n## Develop the application\n\n### Setting up the Quarkus Application\n\n- We will bootstrap the Quarkus application with the following Maven command\n\n```shell\nmvn io.quarkus:quarkus-maven-plugin:1.7.2.Final:create \\\n    -DprojectGroupId={com.ibm} \\\n    -DprojectArtifactId={quarkus-kstreams-lab} \\\n    -Dextensions=\"kafka,kafka-streams,resteasy-jsonb,smallrye-health,smallrye-reactive-messaging-kafka,quarkus-smallrye-openapi,quarkus-kafka-streams,openshift\"\n```\n\nYou can replace the fields within {} as you like.\n- recall that is if you want to add an extension do something like: `./mvnw Quarkus:add-extension -Dextensions=\"kafka\"`\n- Since we will be using the Kafka Streams testing functionality we will need to edit the `pom.xml` to add\nthe dependency to our project. Open `pom.xml` and add the following.\n\n```xml\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-streams-test-utils</artifactId>\n    <version>2.5.0</version>\n    <scope>test</scope>\n</dependency>\n```\n### Start the dev mode \n\n```shell\n./mvnw quarkus:dev\n```\n\n## Define the domain entities\n\nUnder the `src/main/java/../domain` folder add the two classes representing the business entities we are using:\n\n```Java\npublic class Item {\n    public static String RESTOCK = \"RESTOCK\";\n    public static String SALE = \"SALE\";\n    public String storeName;\n    public String sku;\n    public int quantity;\n    public String type;\n    public Double price;\n    public String timestamp;\n\n    public Item(){}\n}\n```\n\nThis item will also being used for event structure on `items` topic. The type attribute is to specify if this is a sale event or a restock event.\n\nThe inventory per store includes a map of item.sku and quantity.\n\n```Java\npublic class Inventory {\n    public String storeName;\n    public HashMap<String,Long> stock = new HashMap<String,Long>();\n    public Inventory(){}\n}\n```","type":"Mdx","contentDigest":"da4603ff5742bc9bacf0d095fecd8c71","counter":812,"owner":"gatsby-plugin-mdx"},"exports":[],"rawBody":"---\ntitle: Kafka Streams Test Lab 3\ndescription: Using Kafka Streams to compute real time inventory stock\n---\n\n<AnchorLinks>\n    <AnchorLink>Overview</AnchorLink>\n    <AnchorLink>Scenario Prerequisites</AnchorLink>\n    <AnchorLink>Develop the application</AnchorLink>\n</AnchorLinks>\n\n\n## Overview\n\n- In this lab scenario we're going to use [Quarkus](https://quarkus.io) to develop the core application with Kafka streams api and microprofile reactive messaging.\n- We will be testing using [Apache Kafka Streams](https://kafka.apache.org/documentation/streams/) TestDriver to mimic a Topology, a Stream and Table.\n\nThe requirements to address are:\n\n- consume item sold from items topic, item has unique key. Item event has store information\n- compute for each item its current stock cross store\n- compute the store stock for each item\n- generate inventory event for store - item - stock\n- expose APIs to get stock for a store or for an item\n\n## Scenario Prerequisites\n\n**Java**\n- For the purposes of this lab we suggest Java 11+\n\n**Maven**\n- Maven will be needed for bootstrapping our application from the command-line and running\nour application.\n\n**An IDE of your choice**\n- Ideally an IDE that supports Quarkus (such as Visual Studio Code)\n\n**OpenShift Container Platform**\n    - v4.4.x\n\n**IBM Cloud Pak for Integration**\n    - CP4I2020.2\n\n**IBM Event Streams**\n    - The section on use with Event Streams on CP4I assumes Event Streams v10. IF using a previous version such as ESv2019.4.2\n    there are some differences to how you would configure `application.properties` to establish a connectio\n\n**Code Source**: clone the following git repository: `git clone https://github.com/ibm-cloud-architecture/refarch-eda-item-inventory`\n\n\n## Develop the application\n\n### Setting up the Quarkus Application\n\n- We will bootstrap the Quarkus application with the following Maven command\n\n```shell\nmvn io.quarkus:quarkus-maven-plugin:1.7.2.Final:create \\\n    -DprojectGroupId={com.ibm} \\\n    -DprojectArtifactId={quarkus-kstreams-lab} \\\n    -Dextensions=\"kafka,kafka-streams,resteasy-jsonb,smallrye-health,smallrye-reactive-messaging-kafka,quarkus-smallrye-openapi,quarkus-kafka-streams,openshift\"\n```\n\nYou can replace the fields within {} as you like.\n- recall that is if you want to add an extension do something like: `./mvnw Quarkus:add-extension -Dextensions=\"kafka\"`\n- Since we will be using the Kafka Streams testing functionality we will need to edit the `pom.xml` to add\nthe dependency to our project. Open `pom.xml` and add the following.\n\n```xml\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-streams-test-utils</artifactId>\n    <version>2.5.0</version>\n    <scope>test</scope>\n</dependency>\n```\n### Start the dev mode \n\n```shell\n./mvnw quarkus:dev\n```\n\n## Define the domain entities\n\nUnder the `src/main/java/../domain` folder add the two classes representing the business entities we are using:\n\n```Java\npublic class Item {\n    public static String RESTOCK = \"RESTOCK\";\n    public static String SALE = \"SALE\";\n    public String storeName;\n    public String sku;\n    public int quantity;\n    public String type;\n    public Double price;\n    public String timestamp;\n\n    public Item(){}\n}\n```\n\nThis item will also being used for event structure on `items` topic. The type attribute is to specify if this is a sale event or a restock event.\n\nThe inventory per store includes a map of item.sku and quantity.\n\n```Java\npublic class Inventory {\n    public String storeName;\n    public HashMap<String,Long> stock = new HashMap<String,Long>();\n    public Inventory(){}\n}\n```","frontmatter":{"title":"Kafka Streams Test Lab 3","description":"Using Kafka Streams to compute real time inventory stock"},"fileAbsolutePath":"/Users/jeromeboyer/Code/EDA/refarch-eda/docs/src/pages/use-cases/kafka-streams/lab-3/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}